name: Deploy Database

on:
  push:
    branches: [ "main" ]

jobs:
  deploy-development:
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Install SQL Server Tools (sqlcmd)
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg2 apt-transport-https
          curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /usr/share/keyrings/microsoft-prod.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-prod.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/mssql-tools.list
          sudo apt-get update
          sudo apt-get install -y mssql-tools18 unixodbc-dev
      - name: Run T-SQL script for Development
        run: |
          export PATH="$PATH:/opt/mssql-tools18/bin"
          sqlcmd -S ${{ secrets.SECRET_DB_HOST }} \
                 -U ${{ secrets.SECRET_DB_USER }} \
                 -P ${{ secrets.SECRET_DB_PASS }} \
                 -i init_database.sql \
                 -N -C

  deploy-production:
    runs-on: windows-latest
    needs: deploy-development  # Ensures this runs after deploy-development succeeds
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Chocolatey (if needed)
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

      - name: Install SQLCMD
        shell: powershell
        run: choco install sqlserver-cmdlineutils -y --no-progress

      - name: Verify SQLCMD installation
        shell: cmd
        run: sqlcmd -?

      - name: Debug print variables
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SECRET_DB_HOST_PROD }}
          SQL_USER: ${{ secrets.SECRET_DB_USER_PROD }}
          SQL_PASSWORD: ${{ secrets.SECRET_DB_PASS_PROD }}
        run: |
          echo "SQL_SERVER: %SQL_SERVER%"
          echo "SQL_USER: %SQL_USER%"
          echo "SQL_PASSWORD: ***"
          echo "Full command: sqlcmd -S %SQL_SERVER% -U %SQL_USER% -P [masked] -Q \"SELECT @@VERSION;\""

      - name: Test SQL Server connection
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SECRET_DB_HOST_PROD }}
          SQL_USER: ${{ secrets.SECRET_DB_USER_PROD }}
          SQL_PASSWORD: ${{ secrets.SECRET_DB_PASS_PROD }}
        run: |
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASSWORD%" -Q "SELECT @@VERSION;" -b -o version_output.log || echo "Connection failed with user %SQL_USER%"
          type version_output.log 2>nul || echo "No version output"
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASSWORD%" -Q "SELECT 1 AS connection_test;" -b -o test_output.log || echo "Test query failed with user %SQL_USER%"
          type test_output.log 2>nul || echo "No test output"

      - name: Run SQL Script
        shell: cmd
        env:
          SQL_SERVER: ${{ secrets.SECRET_DB_HOST_PROD }}
          SQL_USER: ${{ secrets.SECRET_DB_USER_PROD }}
          SQL_PASSWORD: ${{ secrets.SECRET_DB_PASS_PROD }}
        run: |
          sqlcmd -S "%SQL_SERVER%" -U "%SQL_USER%" -P "%SQL_PASSWORD%" -i init_database.sql -b -o sql_output.log || echo "Script execution failed with user %SQL_USER%"
          type sql_output.log 2>nul || echo "No script output"
